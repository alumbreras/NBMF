// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// compute_expectation_W_Rcpp
arma::mat compute_expectation_W_Rcpp(const arma::icube& Z_samples, double gamma);
RcppExport SEXP _rMMLEDirBer_compute_expectation_W_Rcpp(SEXP Z_samplesSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::icube& >::type Z_samples(Z_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_expectation_W_Rcpp(Z_samples, gamma));
    return rcpp_result_gen;
END_RCPP
}
// compute_expectation_H_dirdir_Rcpp
arma::mat compute_expectation_H_dirdir_Rcpp(const arma::icube& C_samples, double gamma);
RcppExport SEXP _rMMLEDirBer_compute_expectation_H_dirdir_Rcpp(SEXP C_samplesSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::icube& >::type C_samples(C_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_expectation_H_dirdir_Rcpp(C_samples, gamma));
    return rcpp_result_gen;
END_RCPP
}
// compute_expectation_H_Rcpp
arma::mat compute_expectation_H_Rcpp(const arma::icube& Z_samples, const arma::imat& V, double alpha, double beta);
RcppExport SEXP _rMMLEDirBer_compute_expectation_H_Rcpp(SEXP Z_samplesSEXP, SEXP VSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::icube& >::type Z_samples(Z_samplesSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_expectation_H_Rcpp(Z_samples, V, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// Gibbs_DirBer_DP_Rcpp
SEXP Gibbs_DirBer_DP_Rcpp(const arma::imat& V, arma::imat Z, double alpha, double beta, double gamma, int iter, double burnin);
RcppExport SEXP _rMMLEDirBer_Gibbs_DirBer_DP_Rcpp(SEXP VSEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP iterSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::imat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(Gibbs_DirBer_DP_Rcpp(V, Z, alpha, beta, gamma, iter, burnin));
    return rcpp_result_gen;
END_RCPP
}
// Gibbs_DirBer_finite_Rcpp
SEXP Gibbs_DirBer_finite_Rcpp(const arma::imat& V, arma::imat Z, int K, double alpha, double beta, double gamma, int iter, double burnin);
RcppExport SEXP _rMMLEDirBer_Gibbs_DirBer_finite_Rcpp(SEXP VSEXP, SEXP ZSEXP, SEXP KSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP iterSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::imat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(Gibbs_DirBer_finite_Rcpp(V, Z, K, alpha, beta, gamma, iter, burnin));
    return rcpp_result_gen;
END_RCPP
}
// Gibbs_DirDir_finite_Rcpp
SEXP Gibbs_DirDir_finite_Rcpp(const arma::imat& V, arma::imat Z, int K, double alpha, double gamma, int iter, double burnin);
RcppExport SEXP _rMMLEDirBer_Gibbs_DirDir_finite_Rcpp(SEXP VSEXP, SEXP ZSEXP, SEXP KSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP iterSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::imat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(Gibbs_DirDir_finite_Rcpp(V, Z, K, alpha, gamma, iter, burnin));
    return rcpp_result_gen;
END_RCPP
}
// samples_VWH_DirBer
SEXP samples_VWH_DirBer(const arma::imat& V, const arma::icube& Z_samples, double gamma, double alpha, double beta);
RcppExport SEXP _rMMLEDirBer_samples_VWH_DirBer(SEXP VSEXP, SEXP Z_samplesSEXP, SEXP gammaSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::icube& >::type Z_samples(Z_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(samples_VWH_DirBer(V, Z_samples, gamma, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// VB_DirBer_Rcpp
SEXP VB_DirBer_Rcpp(const arma::imat& V, arma::imat Z, int K, double alpha, double beta, double gamma, int iter);
RcppExport SEXP _rMMLEDirBer_VB_DirBer_Rcpp(SEXP VSEXP, SEXP ZSEXP, SEXP KSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::imat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(VB_DirBer_Rcpp(V, Z, K, alpha, beta, gamma, iter));
    return rcpp_result_gen;
END_RCPP
}
// E_log_p_W_Rcpp
double E_log_p_W_Rcpp(const arma::mat E_log_W, double gamma);
RcppExport SEXP _rMMLEDirBer_E_log_p_W_Rcpp(SEXP E_log_WSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type E_log_W(E_log_WSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(E_log_p_W_Rcpp(E_log_W, gamma));
    return rcpp_result_gen;
END_RCPP
}
// E_log_q_W_Rcpp
double E_log_q_W_Rcpp(const arma::mat& E_log_W, const arma::mat& gamma_vb);
RcppExport SEXP _rMMLEDirBer_E_log_q_W_Rcpp(SEXP E_log_WSEXP, SEXP gamma_vbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type E_log_W(E_log_WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma_vb(gamma_vbSEXP);
    rcpp_result_gen = Rcpp::wrap(E_log_q_W_Rcpp(E_log_W, gamma_vb));
    return rcpp_result_gen;
END_RCPP
}
// E_log_p_Z_Rcpp
double E_log_p_Z_Rcpp(const arma::cube& E_Z, const arma::mat& E_log_W, const arma::imat& V);
RcppExport SEXP _rMMLEDirBer_E_log_p_Z_Rcpp(SEXP E_ZSEXP, SEXP E_log_WSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type E_Z(E_ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type E_log_W(E_log_WSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(E_log_p_Z_Rcpp(E_Z, E_log_W, V));
    return rcpp_result_gen;
END_RCPP
}
// E_log_q_Z_Rcpp
double E_log_q_Z_Rcpp(const arma::cube& E_Z, const arma::imat& V);
RcppExport SEXP _rMMLEDirBer_E_log_q_Z_Rcpp(SEXP E_ZSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type E_Z(E_ZSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(E_log_q_Z_Rcpp(E_Z, V));
    return rcpp_result_gen;
END_RCPP
}
// E_log_p_H_Rcpp
double E_log_p_H_Rcpp(const arma::mat& E_log_H, const arma::mat& E_log_1_H, double alpha, double beta);
RcppExport SEXP _rMMLEDirBer_E_log_p_H_Rcpp(SEXP E_log_HSEXP, SEXP E_log_1_HSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type E_log_H(E_log_HSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type E_log_1_H(E_log_1_HSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(E_log_p_H_Rcpp(E_log_H, E_log_1_H, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// E_log_q_H_Rcpp
double E_log_q_H_Rcpp(const arma::mat& E_log_H, const arma::mat& E_log_1_H, const arma::mat& alpha_vb, const arma::mat& beta_vb);
RcppExport SEXP _rMMLEDirBer_E_log_q_H_Rcpp(SEXP E_log_HSEXP, SEXP E_log_1_HSEXP, SEXP alpha_vbSEXP, SEXP beta_vbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type E_log_H(E_log_HSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type E_log_1_H(E_log_1_HSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha_vb(alpha_vbSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_vb(beta_vbSEXP);
    rcpp_result_gen = Rcpp::wrap(E_log_q_H_Rcpp(E_log_H, E_log_1_H, alpha_vb, beta_vb));
    return rcpp_result_gen;
END_RCPP
}
// E_log_p_V_Rcpp
double E_log_p_V_Rcpp(const arma::imat& V, const arma::cube& E_Z, const arma::mat& E_log_H, const arma::mat& E_log_1_H);
RcppExport SEXP _rMMLEDirBer_E_log_p_V_Rcpp(SEXP VSEXP, SEXP E_ZSEXP, SEXP E_log_HSEXP, SEXP E_log_1_HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type E_Z(E_ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type E_log_H(E_log_HSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type E_log_1_H(E_log_1_HSEXP);
    rcpp_result_gen = Rcpp::wrap(E_log_p_V_Rcpp(V, E_Z, E_log_H, E_log_1_H));
    return rcpp_result_gen;
END_RCPP
}
// likelihood_aspect
double likelihood_aspect(const arma::imat& V, const arma::mat& gamma_vb, const arma::mat& alpha_vb, const arma::mat& beta_vb);
RcppExport SEXP _rMMLEDirBer_likelihood_aspect(SEXP VSEXP, SEXP gamma_vbSEXP, SEXP alpha_vbSEXP, SEXP beta_vbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma_vb(gamma_vbSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha_vb(alpha_vbSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_vb(beta_vbSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood_aspect(V, gamma_vb, alpha_vb, beta_vb));
    return rcpp_result_gen;
END_RCPP
}
// lower_bound_aspect
double lower_bound_aspect(const arma::cube& E_Z, const arma::mat& E_log_W, const arma::mat& E_log_H, const arma::mat& E_log_1_H, const arma::mat& gamma_vb, const arma::mat& alpha_vb, const arma::mat& beta_vb, double alpha, double beta, double gamma, const arma::imat& V);
RcppExport SEXP _rMMLEDirBer_lower_bound_aspect(SEXP E_ZSEXP, SEXP E_log_WSEXP, SEXP E_log_HSEXP, SEXP E_log_1_HSEXP, SEXP gamma_vbSEXP, SEXP alpha_vbSEXP, SEXP beta_vbSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type E_Z(E_ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type E_log_W(E_log_WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type E_log_H(E_log_HSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type E_log_1_H(E_log_1_HSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma_vb(gamma_vbSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha_vb(alpha_vbSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_vb(beta_vbSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(lower_bound_aspect(E_Z, E_log_W, E_log_H, E_log_1_H, gamma_vb, alpha_vb, beta_vb, alpha, beta, gamma, V));
    return rcpp_result_gen;
END_RCPP
}
// VB_Aspect_Rcpp
SEXP VB_Aspect_Rcpp(const arma::imat& V, arma::imat Z, int K, double alpha, double beta, double gamma, int iter, bool checklb);
RcppExport SEXP _rMMLEDirBer_VB_Aspect_Rcpp(SEXP VSEXP, SEXP ZSEXP, SEXP KSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP iterSEXP, SEXP checklbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::imat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< bool >::type checklb(checklbSEXP);
    rcpp_result_gen = Rcpp::wrap(VB_Aspect_Rcpp(V, Z, K, alpha, beta, gamma, iter, checklb));
    return rcpp_result_gen;
END_RCPP
}
// matrix_to_tensor_R
SEXP matrix_to_tensor_R(const arma::imat& Z, int Kmax);
RcppExport SEXP _rMMLEDirBer_matrix_to_tensor_R(SEXP ZSEXP, SEXP KmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type Kmax(KmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_to_tensor_R(Z, Kmax));
    return rcpp_result_gen;
END_RCPP
}
// printVecs
void printVecs(arma::irowvec v1, arma::irowvec v2, int K);
RcppExport SEXP _rMMLEDirBer_printVecs(SEXP v1SEXP, SEXP v2SEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::irowvec >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< arma::irowvec >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    printVecs(v1, v2, K);
    return R_NilValue;
END_RCPP
}
// sample_gibbs_cpp
SEXP sample_gibbs_cpp(const arma::ivec& v_n, const arma::mat& W, arma::imat C, double alpha, int iter, double burnin);
RcppExport SEXP _rMMLEDirBer_sample_gibbs_cpp(SEXP v_nSEXP, SEXP WSEXP, SEXP CSEXP, SEXP alphaSEXP, SEXP iterSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type v_n(v_nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::imat >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_gibbs_cpp(v_n, W, C, alpha, iter, burnin));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rMMLEDirBer_compute_expectation_W_Rcpp", (DL_FUNC) &_rMMLEDirBer_compute_expectation_W_Rcpp, 2},
    {"_rMMLEDirBer_compute_expectation_H_dirdir_Rcpp", (DL_FUNC) &_rMMLEDirBer_compute_expectation_H_dirdir_Rcpp, 2},
    {"_rMMLEDirBer_compute_expectation_H_Rcpp", (DL_FUNC) &_rMMLEDirBer_compute_expectation_H_Rcpp, 4},
    {"_rMMLEDirBer_Gibbs_DirBer_DP_Rcpp", (DL_FUNC) &_rMMLEDirBer_Gibbs_DirBer_DP_Rcpp, 7},
    {"_rMMLEDirBer_Gibbs_DirBer_finite_Rcpp", (DL_FUNC) &_rMMLEDirBer_Gibbs_DirBer_finite_Rcpp, 8},
    {"_rMMLEDirBer_Gibbs_DirDir_finite_Rcpp", (DL_FUNC) &_rMMLEDirBer_Gibbs_DirDir_finite_Rcpp, 7},
    {"_rMMLEDirBer_samples_VWH_DirBer", (DL_FUNC) &_rMMLEDirBer_samples_VWH_DirBer, 5},
    {"_rMMLEDirBer_VB_DirBer_Rcpp", (DL_FUNC) &_rMMLEDirBer_VB_DirBer_Rcpp, 7},
    {"_rMMLEDirBer_E_log_p_W_Rcpp", (DL_FUNC) &_rMMLEDirBer_E_log_p_W_Rcpp, 2},
    {"_rMMLEDirBer_E_log_q_W_Rcpp", (DL_FUNC) &_rMMLEDirBer_E_log_q_W_Rcpp, 2},
    {"_rMMLEDirBer_E_log_p_Z_Rcpp", (DL_FUNC) &_rMMLEDirBer_E_log_p_Z_Rcpp, 3},
    {"_rMMLEDirBer_E_log_q_Z_Rcpp", (DL_FUNC) &_rMMLEDirBer_E_log_q_Z_Rcpp, 2},
    {"_rMMLEDirBer_E_log_p_H_Rcpp", (DL_FUNC) &_rMMLEDirBer_E_log_p_H_Rcpp, 4},
    {"_rMMLEDirBer_E_log_q_H_Rcpp", (DL_FUNC) &_rMMLEDirBer_E_log_q_H_Rcpp, 4},
    {"_rMMLEDirBer_E_log_p_V_Rcpp", (DL_FUNC) &_rMMLEDirBer_E_log_p_V_Rcpp, 4},
    {"_rMMLEDirBer_likelihood_aspect", (DL_FUNC) &_rMMLEDirBer_likelihood_aspect, 4},
    {"_rMMLEDirBer_lower_bound_aspect", (DL_FUNC) &_rMMLEDirBer_lower_bound_aspect, 11},
    {"_rMMLEDirBer_VB_Aspect_Rcpp", (DL_FUNC) &_rMMLEDirBer_VB_Aspect_Rcpp, 8},
    {"_rMMLEDirBer_matrix_to_tensor_R", (DL_FUNC) &_rMMLEDirBer_matrix_to_tensor_R, 2},
    {"_rMMLEDirBer_printVecs", (DL_FUNC) &_rMMLEDirBer_printVecs, 3},
    {"_rMMLEDirBer_sample_gibbs_cpp", (DL_FUNC) &_rMMLEDirBer_sample_gibbs_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_rMMLEDirBer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
